/**
 * TODO: IDEA: In the upload stage, let the user tag some popular tags (like "id", "batch") to the metadata
 * TODO: IDEA: Although steps are always linearly ordered, in the end there'd be a dependency tree.
 * TODO:           The users can pick particular branches
 * TODO: The SampleMetaSelector/GeneMetaSelector should also have the ability to ignore the recommended tags
 * TODO: If the meta column is bool, give them an option to select inversed (for e.g. outliers)
 * The default double-panel layout seen in most parts of the app.
 *
 * The reason this is isolated from the <App /> component is because some
 * pages might have an alternative layout, like "login", "about", or "welcome"
 *
 */

import { Typography as T, withStyles } from '@material-ui/core';
import gql from 'graphql-tag';
import _ from 'lodash';
import * as React from 'react';
import { graphql } from 'react-apollo';
import ReactMarkdown from 'react-markdown';
import { connect } from 'react-redux';
import { branch, renderNothing, withProps } from 'recompose';
import { compose } from 'redux';
import { guardEmpty } from '../utils';
import StepDisplayer from './StepDisplayer';

const MIDDLE_AREA_WIDTH = 800;

const styles = {
  page: {
    backgroundColor: '#fafafa',
  },
  content: {
    width: MIDDLE_AREA_WIDTH + 20,
    margin: '0 auto',
    padding: 10,
  },
};

const ProjectStepLayout = ({ doneSteps, currentProject, classes }) => (
  <div className={classes.page}>
    <div className={classes.content}>
      <div
        style={{
          textAlign: 'center',
          margin: '0 auto',
          marginBottom: 150,
          width: 550,
        }}
      >
        <img width={650} style={{ marginBottom: 64, marginTop: 64 }} src="/granatumx_logo_with_text.svg" />
        <T variant="h6" style={{ fontSize: '4em' }}>
          {currentProject.name}
        </T>
        <T variant="h6" style={{ fontSize: '2em', marginBottom: 64 }}>
          Analysis Report
        </T>
        <T>This report is generated by GranatumX</T>
        <T variant="caption">
          Please cite: Zhu, Xun, et al. "GranatumX: A community engaging and flexible software environment for
          single-cell analysis." bioRxiv (2018): 385591.
        </T>
      </div>
      <div
        style={{
          pageBreakAfter: 'always',
          margin: '0 auto',
          marginBottom: 250,
        }}
      >
        <T component={'div' as any}>
          <ReactMarkdown source={currentProject.description} />
        </T>
      </div>
      {doneSteps.length === 0 ? (
        <div style={{ textAlign: 'center' }}>
          <T variant="caption">The report is empty because there are no completed steps.</T>
        </div>
      ) : (
        doneSteps.map((step) => (
          <React.Fragment key={step.id}>
            <StepDisplayer isReport currentProjectId={currentProject.id} currentStepId={step.id} />
            <div style={{ pageBreakAfter: 'always', marginBottom: 150 }} />
          </React.Fragment>
        ))
      )}
    </div>
  </div>
);

const enhance = compose(
  connect((state: IReduxState) => ({
    currentProjectId: state.location.payload.projectId,
  })),
  graphql(
    gql`
      query ReportLayout($currentProjectId: UUID!) {
        projectById(id: $currentProjectId) {
          id
          name
          description
          stepsByProjectId {
            nodes {
              id
              rank
              status
            }
          }
        }
      }
    `,
  ),
  branch(({ data }) => data.loading, renderNothing),
  /* TODO: this is a hack, remove when upstream fixes the bug */
  guardEmpty('projectById'),
  withProps(({ data }) => ({ currentProject: data.projectById })),
  withProps(({ currentProject }) => ({
    doneSteps: _(currentProject.stepsByProjectId.nodes)
      .filter((x) => x.status === 'DONE')
      .sortBy('rank')
      .value(),
  })),
  withStyles(styles),
);

export default enhance(ProjectStepLayout);
